# Tools for API Documentation 
This is the point in the course where you get your hands busy. You are not expected to read through this module. This module has been specially designed so that you can practice as you learn.

`**Pro Tip:**` The best way to learn API documentation is to write one.

In this module, we’ll explore different API documentation tools and provide a comprehensive overview of their use cases. We’ll look into samples of how to use popular API documentation tools to generate comprehensive, accurate, and visually appealing documentation.

# **Introduction to API Documentation Tools:**


> **Creating a strong impression for your API starts with the Docs.**

An API documentation is like a school lab handbook, where the student relies on each step to successfully experiment. The same goes for developers integrating your API into their projects. Your API documentation has to make it as easy as possible for them to navigate and interact with your API.


> **API documentation is as important to you as it is to the developer.**

One popular misconception is that API documentation is just for developers. API documentation explains your API's capabilities and functionalities and also serves as a knowledge base or reference for your team. API documentation makes it easier for maintenance to be carried out after updates, enhances API security, and eases onboarding for the new employee who has to work with that API. **Your internal team benefits from API documentation** as much as a developer integrating it does.


> **Nobody said it was going to be easy**

Creating and maintaining detailed, accurate, and user-friendly API documentation can be work-intensive and challenging. However, **this process can be easier and more accurate using API documentation tools.** These tools help in creating, maintaining, and updating your documentation efficiently, ensuring accuracy and usability.


----------
# **Types of API Documentation Tools**

There are two types of API documentation tools: **Interactive tools** and **Non-interactive tools**.


## **Interactive Tools:** 

From the name “interactive”, it simply means that you can perform certain actions using the API directly on the platform. These interactions range from enabling users to test API endpoints and see responses in real-time to more advanced interactions like customizing API requests and testing use cases from a playground.

**Common Features of Interactive Tools**


- **Live API Testing:** Users can test endpoints and see responses in real-time directly on the platform
- **Interactive Sessions:** Some have interactive playgrounds and samples where users can input parameters and see real-time results.
- **Real-time feedback:** These tools offer real-time responses to tests, making it easier for users to see how the API works and debug errors.
- **Intuitive and user-friendly interface**: Interactive tools have a user-friendly interface that is easy to navigate and visually appealing

**Pros of Interactive Tools**

Interactive API documentation tools give more than just a description of the API. They enhance the user experience by providing a place where the users can interact and test the API before integrating it into their project.

**Examples of Interactive Tools**

Several API documentation platforms provide an interactive playground for users to test API endpoints and get real-time responses.  
They include:

1. [Swaggerhub (Open API)](https://swagger.io/tools/swagger-ui/)
2. [Mintlify](https://mintlify.com/)
3. [Postman](https://www.postman.com/)
4. [Redocly](https://redocly.com/)

***Let’s test out some of these platforms and see how they are interactive*** 



## **Using Interactive API Documentation Tools** 

In this hands-on section, we will use the Petstore API as our example and demonstrate how to document it using Swagger (OpenAPI), and Mintlify


## **Swagger**

In this section, we will walk through how to use Swagger to interact and test API and see responses in real-time.

**Step-by-Step Guide**

a. To simply test the endpoints or play around with the API parameters, you can click on
       `**Live Demo**`   

![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXd-AGPUp_8hA8jlSV_7R5pqkHjGdNXi1iZChoA2odNvctyJnQpsNVjIr1VneVX-kPByugWoRinxePsDdnHCKoa7-mP8dfyKqFoIzT-4r6A4LJ3UiV6Zm98B87wqNIIzrQ7xD-whcfmrU8Mt7S9rZ-VCb_QT?key=x6JC3786hMvUjyoxaGXwbg)


    ****

> We are looking beyond testing endpoints, so let’s create our API document and interact with it on Swagger. 

b. Sign up to [Swagger UI](https://swagger.io/tools/swagger-ui/), and you will be sent to the `**Homepage**`, Click on `**Create API**`


![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXeH1s_nl16hOXhdUvc8AahcUcequz0gtWO_PwmwZSoFM4E8D5p706yQWa182BMckTRJFpmgb424SKvXAHqm4VrfIAo1SLR9vFm1uHCEEbytqsRAJLNH__H3p3HQEmpcL_Z4EYkT25jnuPeMBSRUs4UpDQrn?key=x6JC3786hMvUjyoxaGXwbg)


              ****


> For this tutorial, we will be working with a sample Petstore API. However, if you already have an API to document, Click on **Import API.**
>  ****
>  **Note: Swagger only permits API in OpenAPI JSON or YAML format**
> 

c. Fill in the Basic information of the sample Petstore API into their respective field. 


![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXdy4awNsulK_qkEBGxgcjEg94pvmMot8iBIuCY5tKbw81A3Hy-05HJUdX5RAxyNhQ7kAdtr1AzKv7qLT3oTQuKl4-zdDmLkjkVvbIjEMprBup1L1MigVG3gO24v6niPSN99M34Zd4IwasUKb45TU6dTr5ME?key=x6JC3786hMvUjyoxaGXwbg)


d. After you have created the API, you will see a preview. 

----------
## **Documenting on Swagger UI**

There are two ways to edit and create parameters in Swagger UI


1. **The first is using** `**Code**`**:** you can use an Open API YAML format to add new parameters and document the API before testing.  If the idea of writing these codes is scary and new, there is an alternative method.


2. The alternative to ****`**Code**` is `**Form**`. With `**Form**`, you can directly fill in the parameters and documentation as text fields. 
![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXfjXjTWAvCWWSHMi2dHW5it6asBB8K1IdMuH57KMKEfgbnm32QPWIiX5SxycLs5UxYTO0Q0lp8N-c3hzfWoEQorwKiL9KsX2VQQmM1N9KCdhAUeG3zNoC55YKZc980Y8y3-_hrqRTGseCTdy6_AHSj8kTM5?key=x6JC3786hMvUjyoxaGXwbg)


 
**Let’s add documentation to our sample Petstore API.** 


1. Include the server URL


    servers:
      - url: https://petstore.example.com/v1
        description: Production server
    


2. Add the paths for the sample Petstore API endpoints. Each path includes the HTTP method, parameters, and responses. 
    paths:
      /pets:
        get:
          summary: List all pets
          operationId: listPets
          tags:
            - pets
          parameters:
            - name: limit
              in: query
              description: How many items to return at one time (max 100)
              required: false
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: A paged array of pets
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
            'default':
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
      /pets/{petId}:
        get:
          summary: Info for a specific pet
          operationId: showPetById
          tags:
            - pets
          parameters:
            - name: petId
              in: path
              required: true
              description: The id of the pet to retrieve
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: Expected response to a valid request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
            'default':
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
    


3. Add the components: (The components define reusable schemas, responses and requests)


    components:
      schemas:
        Pet:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            tag:
              type: string
        Error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
    


> **Note:** You can play around with the descriptions, responses and requests. Test them and see how they work. 


## Preview of the API documentation on Swagger UI
![](https://paper-attachments.dropboxusercontent.com/s_4502C710ED5D776F665BC1E73FE628D68FB1CC0443C8606B6C0A6D0C8B838932_1722733226942_image.png)


           ****

## Testing the API

After adding new parameters, and changing the response body to suit your use case, you can now test the API and get real-time response. 


**To do this:**


- Click on **Try it out** under each request and see the real-time response below.
![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXeINbzB4kFubA7xTlj_Y2-R69uMOoG3M6rSc6BFqcBjf_pA9A7ibh2XtPLQmX_ntCgYX-KkK1Z_ZkrRZ97ELigG-ORRvopRkjMwkri5lZ_uNP0_cpY7yyv0aFQ0ZtrEbvLakMoom1rNSK6rE8TnLVbSq_C3?key=x6JC3786hMvUjyoxaGXwbg)




- Click on **Execute** to see the real-time response
![](https://lh7-rt.googleusercontent.com/docsz/AD_4nXe4HS0Xcyel9uN3JX4vKfPNFOtaPPjwwX3TDWjgXh6jmdR98v5KS7jLusAQmNuduj6I0n71M4eG-cBYJ-kocXQSv_gOo4U70iaNTjIKvf8QF2FCKfWaPuqvV0pcBzh_1wmzjjcJVpRlSSLIQPDXOfvEoMW4?key=x6JC3786hMvUjyoxaGXwbg)

----------


## **Non-Interactive Tools:** 

Non-interactive tools are more focused on providing detailed API information and instruction. They do not directly support API testing on their platforms. 

**Examples of non-interactive tools** 

1. Slate 
2. MkDocs
3. Docusaurus

**Features of non-interactive tools** 

1. They offer tools for static documentation
2. Users can only test API manually with separate tools and scripts
3. Non-interactive tools are more documentation-focused 


## **Using Non-Interactive API Documentation Tools** 

In this hands-on section, we will use the Petstore API as our example and demonstrate how to document it using Docusaurus, a powerful static site generator. 


## **Docusaurus**

In this section, we will walk through how to use Docusaurus to create a static site for our API documentation. 


## Install Docusaurus. [(See complete documentation here)](https://docusaurus.io/docs/installation)

a. Make sure you have Node js installed (>18.0.)
[Download Nodejs here](https://nodejs.org/en/download/package-manager/current) 

b. Create a new Docusaurus project and navigate to the project directory

    npx create-docusaurus@latest my-website classic
    cd my-website

c.  Install dependencies

    npm install

d. Start the development server
npm start

Open `http://localhost:3000` in your browser to see the default Docusaurus site.

Tip: For the next steps, Use a code editor of your choice for easy visualization and Debugging. 
For this sample tutorial, I used **Visual Studio Code**



## Edit the Template:

a. Once you have successfully downloaded Docusaurus, you can open it using Visual studio code


    cd my-website
    code .


b. In the `docs` folder, you will see `intro.md`, this is where we will be adding our API documentation. 

**Note: Docusarus supports Markdown and React pages.** 

    ---
    sidebar_position: 1
    ---
    ## API Documentation Intro
    This is a sample Petstore API endpoint built on **Docusaurus in less than 5 minutes**.
    ---
    #### Description of the API
    ```
    id: petstore-api
    title: Petstore API Documentation
    description: API documentation for the Petstore sample API.
    sidebar_label: Petstore API
    ```
    ## Writing the API Body
    #### Server Information
    ```yaml
    servers:
      - url: https://petstore.example.com/v1
        description: Production server
    ```
    ## API Endpoints
     Next, document the API endpoints. Include the paths, HTTP methods, parameters, and responses.
    
    ##### List All Pets
    ```yaml
    paths:
      /pets:
        get:
          summary: List all pets
          operationId: listPets
          tags:
            - pets
          parameters:
            - name: limit
              in: query
              description: How many items to return at one time (max 100)
              required: false
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: A paged array of pets
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
            'default':
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
    ```
    
    ##### **Get Pet by ID**
    ```yaml
      /pets/{petId}:
        get:
          summary: Info for a specific pet
          operationId: showPetById
          tags:
            - pets
          parameters:
            - name: petId
              in: path
              required: true
              description: The id of the pet to retrieve
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: Expected response to a valid request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
            'default':
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
    ```
    ## Add Component Schemas
     Schemas are reusable codes. They help in defining the structure of the data returned by the API. 
    #### We are going to include the reusable schemas for `Pet` and `Error`.
    ### **Pet Schema**
    ```yaml
    components:
      schemas:
        Pet:
          type: object
          required:
            - id
            - name
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            tag:
              type: string
    ```
    ### **Error Schema**
    ```yaml
        Error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
    ```


## **Preview of the API Documentation**

**Live View of the site:** [Petstore Sample API](https://petstore-api-docs.vercel.app/)
This is how your API documentation site should look like:

![](https://paper-attachments.dropboxusercontent.com/s_4502C710ED5D776F665BC1E73FE628D68FB1CC0443C8606B6C0A6D0C8B838932_1723204544966_preview+of+docusaurus+petstore+api.png)

----------
# **Factors to consider when choosing an API Documentation tool** 

There are several or tons of API documentation tools. **We’ll not be deciding which tool is better;** they all have unique features and capabilities. Rather, we’ll decide what tools to use after considering certain factors that are key to the API documentation we are working on.

**Let's discuss those factors:**


- **Usability:** Is the tool easy to use and understand? Your choice of API documentation tool, especially as a beginner, should have an intuitive interface, easy navigation, and good support/documentation.


- **Functionality:** If you require additional functionalities like a search functionality to be part of your API docs, then your choice of API documentation tool must support that.


- **Customization Options:** Your choice of API documentation tool also depends on the ability to add custom branding and styling.


- **Integration Capabilities:** Does the tool integrate with existing development tools or support continuous integration and development (CI/CD) pipelines? If these features are necessary for your project, then you should consider tools that support them.


- **Documentation Format Support:** When choosing a documentation tool, it is important to know its compatibility with different file formats (Markdown, HTML, JSON). 

*Note:* It is advisable to choose a tool with the flexibility to export documentation in different formats.

Other factors to consider depending on your usage include the cost/pricing model, scalability, support for version control, and access control features.

***We did all the work for you:***
Here are popular API documentation tools and their unique features.
**Key:**

- **High:** The tool supports extensive capabilities and offers advanced features.
- **Moderate:** The tool supports standard capabilities and includes essential features.
- **Low:** The tool supports few or no capabilities and may lack essential features.


| **S/N** | **Tools**             | **Ease of use** | **Search Functionality** | **Customization** | **Integration** | **Format**<br>**Support**  |
| ------- | --------------------- | --------------- | ------------------------ | ----------------- | --------------- | -------------------------- |
| 1.      | Swagger<br>(Open API) | **High**        | **High**                 | **Moderate**      | **High**        | **JSON, YAML**             |
| 2.      | Postman               | **High**        | **High**                 | **High**          | **High**        | **Markdown & JSON**        |
| 3.      | Redoc                 | **High**        | **High**                 | **Moderate**      | **Moderate**    | **OpenAPI (JSON, YAML)**   |
| 4.      | Readme                | **High**        | **High**                 | **High**          | **High**        | **Markdown & JSON**        |
| 5.      | Docasarus             | **Moderate**    | **High**                 | **High**          | **High**        | **Markdown & JSON**        |
| 6.      | MkDocs                | **High**        | **High**                 | **High**          | **High**        | **Markdown**               |
| 7.      | Apiary                | **High**        | **High**                 | **High**          | **High**        | **API Blueprint, Swagger** |
| 8.      | APIdog                | **High**        | **High**                 | **Moderate**      | **High**        | **Markdown & JSON**        |
| 9.      | Slate                 | **Moderate**    | **Moderate**             | **High**          | **Moderate**    | **Markdown**               |





